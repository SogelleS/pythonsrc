"""
进程与线程是包含关系
一个进程有一个主线程

且一个程序至少有一个进程
一个进程至少有一个线程
线程需要的资源由进程提供

一个线程占用资源比进程小,并发性高
线程之间可以共享资源,运行效率高

两个线程若是一个出错
另一个线程可能会受影响而进程不会

对比项目           多进程            多线程           结论

数据的共享         数据共享难         数据共享简单     按需选择
同步              但是数据是分开的    但是同步难
                 同步简单

创建销毁          切换复杂,速度慢    切换简单,快      线程占优势
切换速度

cpu,内存          占用内存大        占用内存小        线程优势
利用              对cpu利用率低      cpu利用率高

编程与调试         编程调试简单       XXXX困难        进程优势
难度

可靠性             进程间互不影响     可靠性低         进程优势
                    可靠性高

总结

循环多次创建销毁用线程好点
在需要大量计算,切换时用线程
稳定运行用进程,要求速度用线程
cpu密集型建议进程(进程支持cpu多核间运行,线程不支持多核同时访问)
这与cpython解释器的GIL锁有关

"""